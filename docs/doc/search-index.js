var searchIndex = JSON.parse('{\
"ipv4_heatmap":{"doc":"ipv4-heatmap","t":[3,0,12,11,11,11,11,0,0,12,11,11,11,12,11,11,11,11,11,11,11,11,12,0,12,5,0,12,0,12,12,0,12,0,11,11,11,11,11,0,3,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,5,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,12,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,5,5,5,5,17,5,5,3,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,5,11,5,5,11,11,11,11,11,11,12,12,11,12,12],"n":["Args","annotations","annotations","augment_args","augment_args_for_update","borrow","borrow_mut","colors","crop","crop","deref","deref_mut","drop","filename","fmt","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","invert","labels","legend_file","main","mask","mask","outlines","output","palette","prefixes","reverse","shades","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","Annotation","AnnotationCollection","Label","Outline","Prefix","Shade","border_color","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cidr","cidr","cidr","cidr","cidr","color","color","color","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","display_prefix","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fill","fill_color","fmt","fmt","fmt","fmt","fmt","font","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","label","label","label_color","label_font","labels","load_config","ne","ne","ne","ne","ne","outlines","prefix_color","prefixes","shades","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BLACK","PALETTES","WHITE","__private_field","borrow","borrow_mut","deref","deref","deref_mut","drop","from","init","into","legend_cols","select_palette","try_from","try_into","type_id","upgrade","crop_cidrs","annotate_cidrs","mask_cidrs","outline_cidrs","PREFIX_DEFAULT_COLOR","annotate_prefixes","shade_cidrs","BoundingBox","bbox","bbox_from_cidr","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","find_max","find_min","fmt","from","height","hil_xy_from_s","init","into","ip_to_numeric","ne","output_legend","read_lines","to_owned","try_from","try_into","type_id","width","x","xmax","xmin","y","ymax","ymin"],"q":["ipv4_heatmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ipv4_heatmap::annotations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ipv4_heatmap::colors","","","","","","","","","","","","","","","","","","","ipv4_heatmap::crop","ipv4_heatmap::labels","ipv4_heatmap::mask","ipv4_heatmap::outlines","ipv4_heatmap::prefixes","","ipv4_heatmap::shades","ipv4_heatmap::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Supported CLI args","CIDR block annotations","file containing JSON CIDR annotations","","","","","Color palettes and color utilities used by annotations","Crop final heatmap output to the bounding box surrounding …","crop output to area represented by these CIDRs (comma …","","","","input file of IPs","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","invert the chosen color palette","CIDR block text wlabel annotation","output an SVG colourbar legend to this file","main!","Hilight only a list of CIDRs on the heatmap image","Hilight only certain CIDRs in the heatmap image. Can be …","CIDR block outlne annotation","heatmap output file; extenstion determines format","color palette to use; one of (blues br_bg bu_gn bu_pu …","CIDR block prefix annotation","reverse the heatmap base (i.e. white background, black …","CIDR block fill annotation","","","","","","Utility functions used by across the crate","Deserialization structure for the annotation JSON object","Annotations on top of the heatmap can be outlines, shades, …","An annotation describing the CIDR label text &amp; style","An annotation describing the CIDR outline style","An annotation that says to tag each CIDR block with the …","An annotation describing the CIDR fill style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Open and read the spefified annotations JSON file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Generate the 9-color palette used in the legend gradient, …","Return 256 colors from the selected palette, optionally …","","","","Take a 0…1 color channel domain value and upgrade it to …","Crop heatmap to the given CIDR list","Given a vector of label annotations, draw the labels.","Given a vector of areas to highlight (masking all other …","Given a vector of CIDRs, draw a border around them.","","Given a vector of label annotations, draw the labels.","Given a vector of CIDRs, shade them in.","CIDRs in Hilbert space can represent a bounding box","Given the first (numeric) IP address in a CIDR block and …","Given a CIDR in <code>IP/##</code> form, return the bounding box.","","","","","","","","","Find the maximum value in iterable","Find the minimum value in iterable","","Returns the argument unchanged.","","Convert an IPv4 address (in integer form) to a 12th order …","","Calls <code>U::from(self)</code>.","Convert an characrter IPv4 address into an integer.","","Given a filename or path and palette name (+ whether the …","Given a filename or <code>Path</code>, open the text file for reading …","","","","","","","","","","",""],"i":[0,0,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,3,0,3,3,0,3,0,3,3,3,3,3,0,0,0,0,0,0,0,10,10,11,13,14,15,16,10,11,13,14,15,16,10,11,13,14,15,11,14,15,10,11,13,14,15,16,10,11,13,14,15,16,10,10,10,11,13,14,15,16,11,13,14,15,16,13,10,11,13,14,15,16,14,10,11,13,14,15,16,10,11,13,14,15,16,10,11,13,14,15,16,10,14,10,10,16,0,11,13,14,15,16,16,10,16,16,10,11,13,14,15,16,10,11,13,14,15,16,10,11,13,14,15,16,0,0,0,19,19,19,19,19,19,19,19,19,19,0,0,19,19,19,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,0,0,29,29,29,0,29,29,0,29,0,0,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,[1,1],[1,1],[[]],[[]],0,0,0,[2],[2],[2],0,[[3,4],5],[[]],[6,[[8,[3,7]]]],[6,[[8,[3,7]]]],[[],2],[[]],[[],1],[[],1],0,0,0,[[]],0,0,0,0,0,0,0,0,[[],8],[[],8],[[],9],[[3,6],[[8,[7]]]],[[3,6],[[8,[7]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],[[8,[10]]]],0,[2],[2],[2],[2],[2],[2],[[11,11],12],[[13,13],12],[[14,14],12],[[15,15],12],[[16,16],12],0,0,[[11,4],5],[[13,4],5],[[14,4],5],[[15,4],5],[[16,4],5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[[18,[17]]],16],[[11,11],12],[[13,13],12],[[14,14],12],[[15,15],12],[[16,16],12],0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,[[]],[[]],[19,20],[2],[2],[2],[[]],[[],2],[[]],[[21,12],[[23,[22]]]],[[21,12],[[23,[24]]]],[[],8],[[],8],[[],9],[25,26],[27],[[27,[23,[14]]]],[27],[[27,[23,[11]]]],0,[[27,[23,[15]]]],[[27,[23,[13]]]],0,[[28,26],29],[[],29],[[]],[[]],[29,29],[[]],[2],[2],[2],[[29,29],12],[[],30],[[],30],[[29,4],5],[[]],[29,28],[[28,31]],[[],2],[[]],[[],28],[[29,29],12],[[21,12]],[[],[[35,[[34,[[33,[32]]]]]]]],[[]],[[],8],[[],8],[[],9],[29,28],[29,36],0,0,[29,36],0,0],"p":[[6,"Command"],[15,"usize"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"Error"],[4,"Result"],[3,"TypeId"],[3,"Annotation"],[3,"Outline"],[15,"bool"],[3,"Shade"],[3,"Label"],[3,"Prefix"],[3,"AnnotationCollection"],[3,"Path"],[8,"AsRef"],[3,"PALETTES"],[3,"HashMap"],[15,"str"],[3,"String"],[3,"Vec"],[3,"Rgba"],[15,"f64"],[15,"u8"],[3,"Image"],[15,"u32"],[3,"BoundingBox"],[4,"Option"],[15,"i16"],[3,"File"],[3,"BufReader"],[3,"Lines"],[6,"Result"],[15,"i32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
